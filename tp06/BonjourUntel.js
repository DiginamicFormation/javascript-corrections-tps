// ===== EXERCICE BonjourUntel (TP6 - Version robuste) =====
// Description : Fonction qui affiche "Bonjour" suivi d'un pr√©nom avec validation stricte
// Concepts : fonctions, param√®tres, validation de type, throw, try/catch
// Objectif TP6 : Ajouter une gestion d'erreurs robuste avec exceptions

console.log("=== EXERCICE BonjourUntel (TP6) ===\n");

// --- Fonction avec validation ---
/**
 * Affiche un message de salutation personnalis√©
 * @param {string} prenom - Le pr√©nom √† afficher (doit √™tre une cha√Æne non vide)
 */
function bonjourUntel(prenom) {
    // Validation 1 : V√©rifier que le param√®tre existe
    if (prenom === undefined || prenom === null) {
        throw "Le param√®tre 'prenom' est obligatoire";
    }

    // Validation 2 : V√©rifier que c'est bien une cha√Æne de caract√®res
    if (typeof prenom !== "string") {
        throw `Le param√®tre doit √™tre une cha√Æne de caract√®res (type re√ßu : ${typeof prenom})`;
    }

    // Validation 3 : V√©rifier que la cha√Æne n'est pas vide
    if (prenom.trim() === "") {
        throw "Le pr√©nom ne peut pas √™tre vide ou compos√© uniquement d'espaces";
    }

    // Si toutes les validations passent, afficher le message
    console.log(`Bonjour ${prenom.trim()} !`);
}

// --- Tests avec gestion d'erreurs ---
console.log("Test 1 : Cas nominal (pr√©nom valide)\n");
try {
    bonjourUntel("Alice");
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 2 : Cas nominal (autre pr√©nom)\n");
try {
    bonjourUntel("Bob");
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 3 : Pr√©nom avec espaces (devrait fonctionner)\n");
try {
    bonjourUntel("  Marie  ");
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 4 : Erreur - Cha√Æne vide\n");
try {
    bonjourUntel("");
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 5 : Erreur - Que des espaces\n");
try {
    bonjourUntel("   ");
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 6 : Erreur - Type number\n");
try {
    bonjourUntel(123);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 7 : Erreur - Type boolean\n");
try {
    bonjourUntel(true);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 8 : Erreur - Param√®tre manquant (undefined)\n");
try {
    bonjourUntel();
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 9 : Erreur - null\n");
try {
    bonjourUntel(null);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("\n" + "=".repeat(50));

// ===== EXPLICATIONS P√âDAGOGIQUES =====
/*
üéì Concepts cl√©s du TP6 :

1. VALIDATION EN CASCADE
   - On v√©rifie d'abord si le param√®tre existe (undefined/null)
   - Puis on v√©rifie son type (string)
   - Enfin on v√©rifie sa validit√© (non vide)

2. THROW
   - throw "message" : d√©clenche une exception avec un message d'erreur
   - Arr√™te l'ex√©cution de la fonction imm√©diatement
   - L'erreur remonte jusqu'au bloc catch le plus proche

3. TRY/CATCH
   - try { } : bloc o√π on teste le code potentiellement risqu√©
   - catch (error) { } : bloc qui g√®re l'erreur si elle survient
   - Le param√®tre 'error' contient le message lanc√© par throw

4. TRIM()
   - Enl√®ve les espaces en d√©but et fin de cha√Æne
   - Utile pour valider et nettoyer les entr√©es utilisateur
   - "  Alice  ".trim() => "Alice"

5. MESSAGES D'ERREUR DESCRIPTIFS
   - Indiquer le type attendu vs type re√ßu
   - Expliquer pourquoi la validation √©choue
   - Aider le d√©veloppeur √† corriger rapidement

‚ö†Ô∏è DIFF√âRENCE TP5 vs TP6 :
- TP5 : Validation simple avec if/else et return
- TP6 : Validation robuste avec throw et gestion d'erreurs obligatoire (try/catch)
- TP6 : Messages d'erreur d√©taill√©s pour chaque cas invalide
*/
