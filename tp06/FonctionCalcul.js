// ===== EXERCICE FonctionCalcul (TP6 - Version robuste) =====
// Description : Calculer a * b + a + b avec validation des param√®tres
// Concepts : fonction avec plusieurs param√®tres, validation de type, throw, try/catch
// Objectif TP6 : Ajouter une gestion d'erreurs robuste avec exceptions

console.log("=== EXERCICE FonctionCalcul (TP6) ===\n");

// --- Fonction avec validation ---
/**
 * Calcule a * b + a + b
 * @param {number} a - Premier nombre
 * @param {number} b - Deuxi√®me nombre
 */
function calculer(a, b) {
    // Validation 1 : V√©rifier que le premier param√®tre existe
    if (a === undefined || a === null) {
        throw "Le premier param√®tre est obligatoire";
    }

    // Validation 2 : V√©rifier que le premier param√®tre est un nombre
    if (typeof a !== "number") {
        throw `Le premier param√®tre doit √™tre un nombre (type re√ßu : ${typeof a})`;
    }

    // Validation 3 : V√©rifier que le deuxi√®me param√®tre existe
    if (b === undefined || b === null) {
        throw "Le deuxi√®me param√®tre est obligatoire";
    }

    // Validation 4 : V√©rifier que le deuxi√®me param√®tre est un nombre
    if (typeof b !== "number") {
        throw `Le deuxi√®me param√®tre doit √™tre un nombre (type re√ßu : ${typeof b})`;
    }

    // Validation 5 : V√©rifier que les nombres sont valides (pas NaN)
    if (isNaN(a)) {
        throw "Le premier param√®tre n'est pas un nombre valide (NaN)";
    }

    if (isNaN(b)) {
        throw "Le deuxi√®me param√®tre n'est pas un nombre valide (NaN)";
    }

    // Calcul : a * b + a + b
    return a * b + a + b;
}

// --- Tests avec gestion d'erreurs ---
console.log("Test 1 : Cas nominal (nombres valides)\n");
try {
    const resultat = calculer(5, 3);
    console.log(`calculer(5, 3) = ${resultat}`);
    console.log("D√©tail : 5 * 3 + 5 + 3 = 15 + 5 + 3 = 23");
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 2 : Autres nombres\n");
try {
    const resultat = calculer(10, 2);
    console.log(`calculer(10, 2) = ${resultat}`);
    console.log("D√©tail : 10 * 2 + 10 + 2 = 20 + 10 + 2 = 32");
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 3 : Nombres n√©gatifs\n");
try {
    const resultat = calculer(-4, 7);
    console.log(`calculer(-4, 7) = ${resultat}`);
    console.log("D√©tail : -4 * 7 + (-4) + 7 = -28 - 4 + 7 = -25");
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 4 : Erreur - Premier param√®tre n'est pas un nombre\n");
try {
    const resultat = calculer("texte", 5);
    console.log(`R√©sultat : ${resultat}`);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 5 : Erreur - Deuxi√®me param√®tre n'est pas un nombre\n");
try {
    const resultat = calculer(5, "texte");
    console.log(`R√©sultat : ${resultat}`);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 6 : Erreur - Deux cha√Ænes de caract√®res\n");
try {
    const resultat = calculer("Hello", "World");
    console.log(`R√©sultat : ${resultat}`);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 7 : Erreur - Bool√©ens\n");
try {
    const resultat = calculer(true, false);
    console.log(`R√©sultat : ${resultat}`);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 8 : Erreur - Premier param√®tre manquant\n");
try {
    const resultat = calculer();
    console.log(`R√©sultat : ${resultat}`);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 9 : Erreur - Deuxi√®me param√®tre manquant\n");
try {
    const resultat = calculer(5);
    console.log(`R√©sultat : ${resultat}`);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 10 : Erreur - NaN comme param√®tre\n");
try {
    const resultat = calculer(NaN, 5);
    console.log(`R√©sultat : ${resultat}`);
    console.log("‚úì Succ√®s\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("\n" + "=".repeat(50));

// ===== EXPLICATIONS P√âDAGOGIQUES =====
/*
üéì Concepts cl√©s du TP6 :

1. VALIDATION MULTIPLE
   - V√©rifier chaque param√®tre individuellement
   - Messages d'erreur sp√©cifiques pour chaque cas
   - Ordre logique : existence ‚Üí type ‚Üí validit√©

2. isNaN()
   - V√©rifie si une valeur est NaN (Not a Number)
   - NaN est de type 'number' mais invalide
   - typeof NaN === 'number' ‚Üí true
   - isNaN(NaN) ‚Üí true

3. MESSAGES D'ERREUR PR√âCIS
   - Indiquer quel param√®tre pose probl√®me (premier ou deuxi√®me)
   - Pr√©ciser le type attendu et le type re√ßu
   - Facilite le d√©bogage pour le d√©veloppeur

4. TRY/CATCH AVEC CALCUL
   - Le r√©sultat n'est calcul√© que si toutes les validations passent
   - En cas d'erreur, le calcul n'est jamais effectu√©
   - Le catch r√©cup√®re le message d'erreur

5. FORMULE MATH√âMATIQUE
   - calculer(a, b) = a * b + a + b
   - Exemple : calculer(5, 3) = 5 * 3 + 5 + 3 = 15 + 5 + 3 = 23

‚ö†Ô∏è DIFF√âRENCE TP5 vs TP6 :
- TP5 : Pas de validation, retourne NaN si types invalides
- TP6 : Validation stricte avec throw, erreurs explicites
- TP6 : V√©rification de NaN pour √©viter les calculs invalides
*/
