// ===== EXERCICE FonctionControleTableau (TP6 - Version robuste) =====
// Description : V√©rifier qu'un tableau contient uniquement des nombres
// Concepts : validation de tableau, throw, try/catch, messages d'erreur d√©taill√©s
// Objectif TP6 : Gestion d'erreurs avec throw/catch et messages informatifs

console.log("=== EXERCICE FonctionControleTableau (TP6) ===\n");

// --- Fonction avec validation ---
/**
 * V√©rifie qu'un tableau contient uniquement des nombres
 * @param {Array} tableau - Le tableau √† v√©rifier
 */
function contientQueDesNombres(tableau) {
    // Validation 1 : V√©rifier que le param√®tre existe
    if (tableau === undefined || tableau === null) {
        throw "Le param√®tre est obligatoire";
    }

    // Validation 2 : V√©rifier que c'est bien un tableau
    if (!Array.isArray(tableau)) {
        throw `Le param√®tre doit √™tre un tableau (type re√ßu : ${typeof tableau})`;
    }

    // Parcourir tous les √©l√©ments du tableau
    for (let i = 0; i < tableau.length; i++) {
        // V√©rifier que l'√©l√©ment est un nombre
        if (typeof tableau[i] !== "number") {
            // Message d'erreur d√©taill√© indiquant l'index, le type et la valeur
            throw `L'√©l√©ment √† l'index ${i} n'est pas un nombre (type : ${typeof tableau[i]}, valeur : ${JSON.stringify(tableau[i])})`;
        }

        // Validation suppl√©mentaire : v√©rifier que ce n'est pas NaN
        if (isNaN(tableau[i])) {
            throw `L'√©l√©ment √† l'index ${i} est NaN (pas un nombre valide)`;
        }
    }

    // Si on arrive ici, tous les √©l√©ments sont des nombres valides
    return true;
}

// --- Tests avec gestion d'erreurs ---
console.log("Test 1 : Cas nominal (que des nombres)\n");
try {
    const tableau = [1, 5, -3, 0, 8, 7, 4, -2, 28, 7];
    console.log("Tableau :", tableau);
    const resultat = contientQueDesNombres(tableau);
    console.log(`‚úì R√©sultat : ${resultat} (tous les √©l√©ments sont des nombres valides)\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 2 : Tableau vide\n");
try {
    const tableau = [];
    console.log("Tableau :", tableau);
    const resultat = contientQueDesNombres(tableau);
    console.log(`‚úì R√©sultat : ${resultat} (aucun √©l√©ment invalide)\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 3 : Erreur - Tableau contenant une cha√Æne\n");
try {
    const tableau = [1, 5, "texte", 0, 8, 7];
    console.log("Tableau :", tableau);
    const resultat = contientQueDesNombres(tableau);
    console.log(`‚úì R√©sultat : ${resultat}\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 4 : Erreur - Tableau avec bool√©en\n");
try {
    const tableau = [1, 2, true, 4];
    console.log("Tableau :", tableau);
    const resultat = contientQueDesNombres(tableau);
    console.log(`‚úì R√©sultat : ${resultat}\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 5 : Erreur - Tableau avec null\n");
try {
    const tableau = [1, null, 3];
    console.log("Tableau :", tableau);
    const resultat = contientQueDesNombres(tableau);
    console.log(`‚úì R√©sultat : ${resultat}\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 6 : Erreur - Tableau avec undefined\n");
try {
    const tableau = [1, 2, undefined, 4];
    console.log("Tableau :", tableau);
    const resultat = contientQueDesNombres(tableau);
    console.log(`‚úì R√©sultat : ${resultat}\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 7 : Erreur - Tableau avec objet\n");
try {
    const tableau = [1, 2, {valeur: 3}, 4];
    console.log("Tableau :", tableau);
    const resultat = contientQueDesNombres(tableau);
    console.log(`‚úì R√©sultat : ${resultat}\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 8 : Erreur - Tableau avec plusieurs types\n");
try {
    const tableau = [1, "texte", true, null, undefined, {}];
    console.log("Tableau :", tableau);
    const resultat = contientQueDesNombres(tableau);
    console.log(`‚úì R√©sultat : ${resultat}\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 9 : Erreur - Param√®tre n'est pas un tableau\n");
try {
    const pasDeTablieu = "pas un tableau";
    console.log("Param√®tre :", pasDeTablieu);
    const resultat = contientQueDesNombres(pasDeTablieu);
    console.log(`‚úì R√©sultat : ${resultat}\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 10 : Erreur - Param√®tre manquant\n");
try {
    const resultat = contientQueDesNombres();
    console.log(`‚úì R√©sultat : ${resultat}\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 11 : Erreur - NaN dans le tableau\n");
try {
    const tableau = [1, 5, NaN, 8];
    console.log("Tableau :", tableau);
    const resultat = contientQueDesNombres(tableau);
    console.log(`‚úì R√©sultat : ${resultat}\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}`);
    console.log("Note : NaN est de type 'number' mais n'est pas valide\n");
}

console.log("\n" + "=".repeat(50));

// ===== EXPLICATIONS P√âDAGOGIQUES =====
/*
üéì Concepts cl√©s du TP6 :

1. VALIDATION DE TABLEAU
   - V√©rifier que le param√®tre existe (undefined/null)
   - V√©rifier que c'est bien un tableau avec Array.isArray()
   - Parcourir chaque √©l√©ment et v√©rifier son type

2. ARRAY.isArray()
   - M√©thode pour v√©rifier si une valeur est un tableau
   - typeof [] === 'object' (pas assez pr√©cis)
   - Array.isArray([]) === true
   - Array.isArray("texte") === false

3. MESSAGES D'ERREUR D√âTAILL√âS
   - Indiquer l'index de l'√©l√©ment probl√©matique
   - Pr√©ciser le type re√ßu
   - Afficher la valeur pour faciliter le d√©bogage
   - Utiliser JSON.stringify() pour afficher les objets

4. CAS PARTICULIER : NaN
   - NaN signifie "Not a Number"
   - typeof NaN === 'number' (quirk JavaScript)
   - Il faut utiliser isNaN() pour d√©tecter NaN
   - NaN !== NaN (seule valeur non √©gale √† elle-m√™me)

5. JSON.stringify()
   - Convertit une valeur en cha√Æne JSON
   - Utile pour afficher des objets dans les messages d'erreur
   - JSON.stringify({a: 1}) ‚Üí '{"a":1}'
   - JSON.stringify([1, 2]) ‚Üí '[1,2]'

‚ö†Ô∏è DIFF√âRENCE TP5 vs TP6 :
- TP5 : Retourne true/false
- TP6 : Throw avec messages d√©taill√©s (index, type, valeur)
- TP6 : Validation du param√®tre (existence, type tableau)
- TP6 : Gestion de NaN
*/
