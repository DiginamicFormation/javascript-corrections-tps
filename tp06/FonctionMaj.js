// ===== EXERCICE FonctionMaj (TP6 - Version robuste) =====
// Description : Mettre la premi√®re lettre d'une cha√Æne en majuscule avec validation
// Concepts : manipulation de cha√Ænes, throw, try/catch, validation de type
// Objectif TP6 : Gestion d'erreurs robuste avec throw/catch

console.log("=== EXERCICE FonctionMaj (TP6) ===\n");

// --- Fonction avec validation ---
/**
 * Met la premi√®re lettre d'une cha√Æne en majuscule
 * @param {string} chaine - La cha√Æne √† transformer
 */
function mettreEnMajuscule(chaine) {
    // Validation 1 : V√©rifier que le param√®tre existe
    if (chaine === undefined || chaine === null) {
        throw "Le param√®tre est obligatoire";
    }

    // Validation 2 : V√©rifier que c'est bien une cha√Æne de caract√®res
    if (typeof chaine !== "string") {
        throw `Le param√®tre doit √™tre une cha√Æne de caract√®res (type re√ßu : ${typeof chaine})`;
    }

    // Cas particulier : cha√Æne vide (retourner telle quelle)
    if (chaine.length === 0) {
        return chaine;
    }

    // Transformation : premi√®re lettre en majuscule + reste de la cha√Æne
    const premiereLettreMaj = chaine.charAt(0).toUpperCase();
    const resteChaine = chaine.slice(1);

    return premiereLettreMaj + resteChaine;
}

// --- Tests avec gestion d'erreurs ---
console.log("Test 1 : Cas nominal (mot en minuscules)\n");
try {
    const texte = "bonjour";
    console.log(`Entr√©e : "${texte}"`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 2 : Autre mot\n");
try {
    const texte = "javascript";
    console.log(`Entr√©e : "${texte}"`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 3 : Mot d√©j√† en majuscule\n");
try {
    const texte = "HELLO";
    console.log(`Entr√©e : "${texte}"`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"`);
    console.log("Note : La premi√®re lettre reste en majuscule\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 4 : Premi√®re lettre d√©j√† en majuscule\n");
try {
    const texte = "Hello";
    console.log(`Entr√©e : "${texte}"`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 5 : Un seul caract√®re\n");
try {
    const texte = "a";
    console.log(`Entr√©e : "${texte}"`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 6 : Cha√Æne vide\n");
try {
    const texte = "";
    console.log(`Entr√©e : "${texte}"`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"`);
    console.log("Note : Cha√Æne vide retourn√©e telle quelle\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 7 : Phrase compl√®te\n");
try {
    const texte = "hello world";
    console.log(`Entr√©e : "${texte}"`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"`);
    console.log("Note : Seule la premi√®re lettre est en majuscule\n");
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 8 : Erreur - Type number\n");
try {
    const texte = 12345;
    console.log(`Entr√©e : ${texte}`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 9 : Erreur - Type boolean\n");
try {
    const texte = true;
    console.log(`Entr√©e : ${texte}`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 10 : Erreur - Objet\n");
try {
    const texte = {valeur: "hello"};
    console.log(`Entr√©e :`, texte);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 11 : Erreur - null\n");
try {
    const texte = null;
    console.log(`Entr√©e : ${texte}`);
    const resultat = mettreEnMajuscule(texte);
    console.log(`‚úì R√©sultat : "${resultat}"\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("Test 12 : Erreur - Param√®tre manquant\n");
try {
    const resultat = mettreEnMajuscule();
    console.log(`‚úì R√©sultat : "${resultat}"\n`);
} catch (error) {
    console.log(`‚úó Erreur captur√©e : ${error}\n`);
}

console.log("\n" + "=".repeat(50));

// ===== EXPLICATIONS P√âDAGOGIQUES =====
/*
üéì Concepts cl√©s du TP6 :

1. MANIPULATION DE CHA√éNES
   - charAt(0) : r√©cup√®re le premier caract√®re
   - toUpperCase() : convertit en majuscule
   - slice(1) : r√©cup√®re tout sauf le premier caract√®re
   - Concat√©nation : premiereLettre + reste

2. M√âTHODES DE STRING
   - charAt(index) : caract√®re √† la position index
   - slice(d√©but, fin) : extrait une portion de cha√Æne
   - toUpperCase() : convertit tout en majuscules
   - toLowerCase() : convertit tout en minuscules

3. CAS PARTICULIER : CHA√éNE VIDE
   - length === 0
   - Pas de premi√®re lettre √† mettre en majuscule
   - Retourner la cha√Æne telle quelle

4. VALIDATION STRICTE
   - V√©rifier l'existence (undefined/null)
   - V√©rifier le type (string)
   - throw si invalide
   - Les m√©thodes de string ne fonctionnent que sur des strings

5. POURQUOI LA VALIDATION EST CRITIQUE
   - Sans validation, chaine.charAt(0) crash si chaine n'est pas string
   - TypeError: chaine.charAt is not a function
   - Meilleur message d'erreur avec validation

‚ö†Ô∏è DIFF√âRENCE TP5 vs TP6 :
- TP5 : Pas de validation, crash si type invalide
- TP6 : Validation avec throw/catch, messages d'erreur clairs
- TP6 : Gestion des cas limites (null, undefined)

üí° EXEMPLE DE TRANSFORMATION :
- "bonjour" ‚Üí "Bonjour"
- "hello world" ‚Üí "Hello world" (un seul mot mis en majuscule)
- "a" ‚Üí "A"
- "" ‚Üí ""

üí° ALTERNATIVE MODERNE :
- chaine[0] au lieu de chaine.charAt(0)
- Mais charAt() est plus explicite pour l'apprentissage
*/
